#!/usr/bin/env perl

# Use perldoc or option --man to read documentation
our $version = '0.01';

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use Carp;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use List::Util;
use File::Temp;

# Include private modules.
use App::Pai::AlsaState;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
my $prog_incantation  = $0;
my $prog_dir          = dirname($0);
my $prog_name         = basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{

    # Read the current alsa state.
    my $current_alsa_state = App::Pai::AlsaState->get(
        file => $opt{'--state-file'},
        card => $opt{'--card'},);

    # Toggle any switches.
    my @to_toggle = @{$opt{'--toggle'} || []};
    push @to_toggle, 'master' if $opt{'-T'};
    for my $connection (@to_toggle) {
        $connection = 'master' 
            if !defined $connection || $connection =~ m/\A\z/xms;
        App::Pai::AlsaState->control_toggle(
            App::Pai::AlsaState->find_control_named(
                App::Pai::AlsaState->control_name(
                    $connection, 
                    'switch'), 
                $current_alsa_state)); }

    # Set volumes.
    my @volumes = @{$opt{'--set-volume'} || []};
    if ($opt{'-V'}) {
        push @volumes, 
            {'connection' => 'master', 'volume' => $opt{'-V'}}
    }
    for my $conn_vol (@volumes) {
        my ($connection, $volume) 
            = ($conn_vol->{'connection'}, $conn_vol->{'volume'});
        $connection = 'master' 
            if !defined $connection || $connection =~ m/\A\z/xms;
        App::Pai::AlsaState->control_level(
            App::Pai::AlsaState->find_control_named(
                App::Pai::AlsaState->control_name(
                    $connection, 
                    'volume'), 
                $current_alsa_state), 
            $volume); }

    # Mute connections.
    my @to_mute = @{$opt{'--mute'} || []};
    push @to_mute, 'master' if $opt{'-M'};
    for my $connection (@to_mute) {
        $connection = 'master' 
            if !defined $connection || $connection =~ m/\A\z/xms;
        App::Pai::AlsaState->control_level(
            App::Pai::AlsaState->find_control_named(
                App::Pai::AlsaState->control_name(
                    $connection,
                    'volume'), 
                $current_alsa_state), 
            0); }

    # Set mic boost.
    my $mic_boost = $opt{'--set-mic-boost'};
    # do something here.

    if (defined $opt{'--verbose'}) {
        my $state_string 
            = App::Pai::AlsaState::state_string($current_alsa_state);
        print $state_string;
    }

    exit 0 if $opt{'--dry-run'};

    App::Pai::AlsaState->commit($current_alsa_state, $opt{'--card'});

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################


# Finally, kickstart the script
main();

__END__

=head1 NAME

pai - Perl based Alsa driver Interface

=head1 VERSION

Version 0.02
Originally created on 04/25/10 02:56:02

=head1 USAGE

pai [options]

=head1 REQUIRED ARGUMENTS

=over

=back

=head1 OPTIONS

=over

=item -c <target> | --card [=] <target>

Card #, ID, or device.

All devices are updated if not supplied.

=for Euclid:
    target.default: undef

=item -t <to_toggle> | --toggle [=] <to_toggle>

Toggle a connection from an inactive state to an active one, or vice 
versa, depending on its current state.

<to_toggle> can be any of 'master', 'speaker', 'headphone', 'mic', 
or 'beep'.

=for Euclid:
	repeatable
	to_toggle.type: /master|speaker|headphone|mic|beep/

=item -T

Toggle the master connection.

=item -v <connection>:<volume> | --set-volume [=] <connection>:<volume>

Set the volume on a specified connection. 

<volume> is a percentage; a number in range [0,1].

You may specify multiple -v  options in one command. If you specify more
than one for the same connection the last one will take affect after the
program has completed.

=for Euclid:
	repeatable
	connection.type: /master|speaker|headphone|mic|beep|pcm/
	volume.type: number, 0 <= volume && volume <= 1

=item -V <master_vol> | --master-volume [=] <master_vol>

Set the master volume

for Euclid:
	volume.type: number, 0 <= volume && volume <= 1

=item -m <mute_conn> | --mute [=] <mute_conn>

Mute a specified connection. 

'master' will be muted if no mute_conn is specified.

This is identical to the option "--set-volume=<mute_conn>:0",
but will take precidence over any other --set-volume option on the same
connection.

This option is repeatable.

=for Euclid:
	repeatable
	mute_conn.type: /master|speaker|headphone|mic|beep|pcm/

=item -M

Mute the master connection

=item -b <boost> | --set-mic-boost [=] <boost>

Specify the microphone boost value acceptable values of this may change 
depending on hardware.

=for Euclid:
	boost.type: 0+integer

=item -i [<control>] | --info [=] [<control>]

Print information a specific control (or all if none specified) in the 
current alsa state (or the alsa state provided via the -f option).
This information includes acceptable volume levels for the given 
control.

=for Euclid:
	repeatable
	control.type: +integer

=item -f <file> | --state-file [=] <file>

An alsa configuration state file to read in, instead of reading the 
current alsa state from alsactl.

=for Euclid:
	file.type: readable

=item --dry-run

Don't actually update alsactl; just try to parse the alsa state and modify
the internal data structure representing the state.

It's a good idea to use this option with -v.

=item --verbose

Print the modified alsa state to stdout.

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

With this program, a user can update their audio settings via a single 
command, as opposed to gnome-volume-manager and alsamixer.

Some examples of tasks that should be doable via pai:

=over

=item Toggle master, headphone, speaker, mic, and beep switches.

It turns out to be a bad idea to toggle the anything except master and mic
(possibly beep?)

=item Adjust volume (master, speaker, headphone, mic, beep)

I can do this on a low level now.

=item Microphone boost

=item PCM (pulse-code-modulation) volume

=back

Some things that pai will probably never do:

=over

=item Modify control comments I don't want to mess around with 
acceptable decibal/volume/value ranges. These values will be parsed, 
but they will not be modifiable.

=back

=head1 BUGS

=over

=back

=head1 AUTHOR & COPYRIGHT 

Â©Bryan Matsuo (bryan.matsuo@gmail.com)

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.0 or,
at your option, any later version of Perl 5 you may have available.
